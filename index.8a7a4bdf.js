window.Game = class { constructor() { this.controller = null, this.wait = this.wait.bind(this), this.wait() } wait() { "undefined" == typeof THREE && "undefined" == typeof io ? requestAnimationFrame(this.wait) : this.loadingDone() } loadingDone() { this.frameCap = 1e3 / 60, this.scene = new THREE.Scene, this.cameraContainer = new THREE.Object3D, this.camera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, .001, 1e6), this.cameraContainer.add(this.camera), this.scene.add(this.cameraContainer), this.renderer = new THREE.WebGLRenderer({ antialias: !0, alpha: !1, powerPreference: "high-performance", stencil: !1, logarithmicDepthBuffer: !0 }), this.renderer.setSize(window.innerWidth, window.innerHeight), this.renderer.outputColorSpace = THREE.SRGBColorSpace, this.renderer.toneMapping = THREE.NeutralToneMapping, this.renderer.toneMappingExposure = 1, this.controls = new PointerLockControls(this.camera, this.renderer.domElement), window.addEventListener("resize", () => { this.camera.aspect = window.innerWidth / window.innerHeight, this.camera.updateProjectionMatrix(), this.renderer.setSize(window.innerWidth, window.innerHeight) }), document.body.appendChild(this.renderer.domElement), document.body.appendChild(VRButton.createButton(this.renderer)), this.renderer.xr.enabled = !0, this.clock = new THREE.Clock, this.stats = new Stats, document.body.appendChild(this.stats.dom), this.cameraStart = new THREE.Vector3(4.5, 1.49, 9.5), this.raycaster = new THREE.Raycaster, this.introVillage = !0, this.normalVillage = !1, this.prevContextState = "suspended", this.loadScene1() } loadScene1() { this.loader = new GLTFLoader, new RGBELoader().load("./background5.hdr", e => { e.colorSpace = THREE.LinearSRGBColorSpace, e.mapping = THREE.EquirectangularReflectionMapping, this.scene.background = e, this.scene.backgroundIntensity = .7, this.scene.environment = e, this.scene.environmentIntensity = 1, this.loader.load("./testfiaba6.glb", e => { this.map = e.scene, this.walls = this.createInstanced("fence_wood_straight", this.map), this.scene.add(this.walls), this.spawnPoints = [], this.map.children.forEach(e => { e.name.includes("spawnPoint") && (e.material.transparent = !0, e.counter = 0, e.start = 0, e.visible = !1, this.spawnPoints.push(e)) }), this.scene.add(this.map), this.loader.load("./pointer.glb", e => { this.pointer = e.scene, this.pointer.rotation.y = Math.PI / 2, this.pointer.children[0].material = new THREE.MeshBasicMaterial({ color: 0xffffff, depthTest: !1, depthWrite: !1, transparent: !0 }), this.pointer.position.z = -1, this.camera.add(this.pointer), this.loader.load("./cameraPath.glb", e => { this.cameraPath = e.scene, this.cameraPath.visible = !1, this.mixerCam = new THREE.AnimationMixer(this.cameraPath), this.actionCam = this.mixerCam.clipAction(e.animations[0]), this.actionCam.loop = THREE.LoopRepeat, this.actionCam.timeScale = .15, this.scene.add(this.cameraPath), this.loader.load("./testfiaba-ped.glb", e => { this.actionIdle = e.animations[1], this.ped = e.scene, this.mixer = new THREE.AnimationMixer(this.ped), this.action = this.mixer.clipAction(this.actionIdle), this.action.play(), this.listener = new THREE.AudioListener, this.listener.rotation.y = Math.PI - Math.PI / 8, this.camera.add(this.listener), this.sound = new THREE.PositionalAudio(this.listener), new THREE.AudioLoader().load("./audio2.mp3", e => { this.sound.setBuffer(e), this.sound.setVolume(10), this.sound.setLoop(!0) }), this.bgSound = new THREE.Audio(this.listener), new THREE.AudioLoader().load("./bgaudio.mp3", e => { this.bgSound.setBuffer(e), this.bgSound.setVolume(.5), this.bgSound.setLoop(!0) }), this.voiceLine = new THREE.Audio(this.listener), new THREE.AudioLoader().load("./voiceline.mp3", e => { this.voiceLine.setBuffer(e), this.voiceLine.setVolume(3.5), this.voiceLine.setLoop(!1), this.voiceLine.onEnded = () => { for (var e of (console.log("ended"), this.normalVillage = !0, this.cameraContainer.position.copy(this.cameraStart), this.spawnPoints)) e.visible = !0; this.map.getObjectByName("spawnPointStart").visible = !1, this.sound.play() } }), this.ped.add(this.sound), this.scene.add(this.ped), this.update() }) }) }) }) }) } start() { this.actionCam.play(), this.voiceLine.play(), this.bgSound.play() } update() { this.renderer.setAnimationLoop(() => { this.delta = this.clock.getDelta(), this.renderer.render(this.scene, this.camera), this.stats.update(), this.mixer.update(this.delta), this.mixerCam.update(this.delta), this.introVillage && (this.introVillage = !1), this.normalVillage || this.cameraContainer.position.copy(this.cameraPath.children[0].getWorldPosition(new THREE.Vector3)), this.checkRaycast(), 0 == !this.renderer.xr.getCamera().cameras.length && (this.cameraContainer.position.y = -.2, this.listener.context.resume()) }) } checkRaycast() { if (this.raycaster.set(this.camera.getWorldPosition(new THREE.Vector3), this.camera.getWorldDirection(new THREE.Vector3)), this.intersects = this.raycaster.intersectObjects(this.spawnPoints), this.intersects.length > 0) { if (0 === this.intersects[0].object.start && (this.intersects[0].object.start = Date.now()), this.intersects[0].object.counter = Date.now() - this.intersects[0].object.start, this.factor = this.intersects[0].object.counter / 1e3, this.cameraContainer.position.x !== this.intersects[0].object.getWorldPosition(new THREE.Vector3).x && this.cameraContainer.position.z !== this.intersects[0].object.getWorldPosition(new THREE.Vector3).z && this.pointer.scale.set(.03 + .015 * this.factor, .03 + .015 * this.factor, .03 + .015 * this.factor), this.intersects[0].object.counter >= 1e3) { for (var e of this.spawnPoints) e.visible = !0; this.sound.stop(), this.intersects[0].object.visible = !1, this.cameraContainer.position.copy(this.intersects[0].object.getWorldPosition(new THREE.Vector3).add(new THREE.Vector3(0, 1.3, 0))), "spawnPointStart" !== this.intersects[0].object.name || this.sound.isPlaying || this.sound.play() } } else for (var e of this.spawnPoints) e.start = 0, e.counter = 0, this.pointer.scale.set(.03, .03, .03) } createInstanced(e, t) { var i, s, n = 0, a = []; if (t.traverse(t => { (t.name.includes(e + "0") || t.name === e) && (n++, t.traverse(e => { e.geometry && (i = t.geometry, s = t.material, e.visible = !1, a.push({ pos: e.getWorldPosition(new THREE.Vector3), rot: e.getWorldQuaternion(new THREE.Quaternion), scl: e.getWorldScale(new THREE.Vector3) })) })) }), 0 === n) console.log("No mesh with name " + e); else { for (var o = new THREE.InstancedMesh(i, s, n), r = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1), new THREE.MeshBasicMaterial), h = 0; h < n; h++)r.position.copy(a[h].pos), r.quaternion.copy(a[h].rot), r.scale.copy(a[h].scl), r.updateMatrix(), o.setMatrixAt(h, r.matrix); return o.needsUpdate = !0, o } } };
//# sourceMappingURL=index.8a7a4bdf.js.map

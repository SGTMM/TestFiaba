{"mappings":"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","sources":["<anon>","src/game.js"],"sourcesContent":["class Game {\n    constructor(){\n        this.controller = null;\n        this.wait = this.wait.bind(this);\n        this.wait();\n    }\n    wait() {\n        if (typeof THREE === \"undefined\" && typeof io === \"undefined\") requestAnimationFrame(this.wait);\n        else this.loadingDone();\n    }\n    loadingDone() {\n        this.frameCap = 1000 / 60;\n        this.scene = new THREE.Scene();\n        this.cameraContainer = new THREE.Object3D();\n        this.camera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, 0.001, 1000000);\n        this.cameraContainer.add(this.camera);\n        this.scene.add(this.cameraContainer);\n        this.renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            alpha: false,\n            powerPreference: \"high-performance\",\n            stencil: false,\n            logarithmicDepthBuffer: true\n        });\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.outputColorSpace = THREE.SRGBColorSpace;\n        this.renderer.toneMapping = THREE.NeutralToneMapping;\n        this.renderer.toneMappingExposure = 1.0;\n        this.controls = new PointerLockControls(this.camera, this.renderer.domElement);\n        window.addEventListener(\"resize\", ()=>{\n            this.camera.aspect = window.innerWidth / window.innerHeight;\n            this.camera.updateProjectionMatrix();\n            this.renderer.setSize(window.innerWidth, window.innerHeight);\n        });\n        document.body.appendChild(this.renderer.domElement);\n        document.body.appendChild(VRButton.createButton(this.renderer));\n        this.renderer.xr.enabled = true;\n        this.clock = new THREE.Clock();\n        this.stats = new Stats();\n        document.body.appendChild(this.stats.dom);\n        this.cameraStart = new THREE.Vector3(4.5, 1.49, 9.5);\n        this.raycaster = new THREE.Raycaster();\n        this.introVillage = true;\n        this.normalVillage = false;\n        this.prevContextState = \"suspended\";\n        this.loadScene1();\n    }\n    loadScene1() {\n        this.loader = new GLTFLoader();\n        new RGBELoader().load(\"background5.hdr\", (texture)=>{\n            texture.colorSpace = THREE.LinearSRGBColorSpace;\n            texture.mapping = THREE.EquirectangularReflectionMapping;\n            this.scene.background = texture;\n            this.scene.backgroundIntensity = 0.7;\n            this.scene.environment = texture;\n            this.scene.environmentIntensity = 1;\n            this.loader.load(\"testfiaba6.glb\", (glb)=>{\n                this.map = glb.scene;\n                this.walls = this.createInstanced(\"fence_wood_straight\", this.map);\n                this.scene.add(this.walls);\n                this.spawnPoints = [];\n                this.map.children.forEach((e)=>{\n                    if (e.name.includes(\"spawnPoint\")) {\n                        e.material.transparent = true;\n                        e.counter = 0;\n                        e.start = 0;\n                        e.visible = false;\n                        this.spawnPoints.push(e);\n                    }\n                });\n                this.scene.add(this.map);\n                this.loader.load(\"pointer.glb\", (glb)=>{\n                    this.pointer = glb.scene;\n                    this.pointer.rotation.y = Math.PI / 2;\n                    this.pointer.children[0].material = new THREE.MeshBasicMaterial({\n                        color: 0xffffff,\n                        depthTest: false,\n                        depthWrite: false,\n                        transparent: true\n                    });\n                    this.pointer.position.z = -1;\n                    this.camera.add(this.pointer);\n                    this.loader.load(\"cameraPath.glb\", (glb)=>{\n                        this.cameraPath = glb.scene;\n                        this.cameraPath.visible = false;\n                        this.mixerCam = new THREE.AnimationMixer(this.cameraPath);\n                        this.actionCam = this.mixerCam.clipAction(glb.animations[0]);\n                        this.actionCam.loop = THREE.LoopRepeat;\n                        this.actionCam.timeScale = 0.15;\n                        this.scene.add(this.cameraPath);\n                        this.loader.load(\"testfiaba-ped.glb\", (glb)=>{\n                            this.actionIdle = glb.animations[1];\n                            this.ped = glb.scene;\n                            this.mixer = new THREE.AnimationMixer(this.ped);\n                            this.action = this.mixer.clipAction(this.actionIdle);\n                            this.action.play();\n                            this.listener = new THREE.AudioListener();\n                            this.listener.rotation.y = Math.PI - Math.PI / 8;\n                            this.camera.add(this.listener);\n                            this.sound = new THREE.PositionalAudio(this.listener);\n                            new THREE.AudioLoader().load(\"audio2.mp3\", (buffer)=>{\n                                this.sound.setBuffer(buffer);\n                                this.sound.setVolume(10);\n                                this.sound.setLoop(true);\n                            });\n                            this.bgSound = new THREE.Audio(this.listener);\n                            new THREE.AudioLoader().load(\"bgaudio.mp3\", (buffer)=>{\n                                this.bgSound.setBuffer(buffer);\n                                this.bgSound.setVolume(0.5);\n                                this.bgSound.setLoop(true);\n                            });\n                            this.voiceLine = new THREE.Audio(this.listener);\n                            new THREE.AudioLoader().load(\"voiceline.mp3\", (buffer)=>{\n                                this.voiceLine.setBuffer(buffer);\n                                this.voiceLine.setVolume(3.5);\n                                this.voiceLine.setLoop(false);\n                                this.voiceLine.onEnded = ()=>{\n                                    console.log(\"ended\");\n                                    this.normalVillage = true;\n                                    this.cameraContainer.position.copy(this.cameraStart);\n                                    for (var obj of this.spawnPoints)obj.visible = true;\n                                    var startSpawn = this.map.getObjectByName(\"spawnPointStart\");\n                                    startSpawn.visible = false;\n                                    this.sound.play();\n                                };\n                            });\n                            this.ped.add(this.sound);\n                            this.scene.add(this.ped);\n                            this.update();\n                        });\n                    });\n                });\n            });\n        });\n    }\n    start() {\n        this.actionCam.play();\n        this.voiceLine.play();\n        this.bgSound.play();\n    }\n    update() {\n        this.renderer.setAnimationLoop(()=>{\n            this.delta = this.clock.getDelta();\n            this.renderer.render(this.scene, this.camera);\n            this.stats.update();\n            this.mixer.update(this.delta);\n            this.mixerCam.update(this.delta);\n            if (this.introVillage) this.introVillage = false;\n            if (!this.normalVillage) this.cameraContainer.position.copy(this.cameraPath.children[0].getWorldPosition(new THREE.Vector3()));\n            this.checkRaycast();\n            if (!this.renderer.xr.getCamera().cameras.length == 0) {\n                this.cameraContainer.position.y = -0.2;\n                this.listener.context.resume();\n            }\n        });\n    }\n    checkRaycast() {\n        this.raycaster.set(this.camera.getWorldPosition(new THREE.Vector3()), this.camera.getWorldDirection(new THREE.Vector3()));\n        this.intersects = this.raycaster.intersectObjects(this.spawnPoints);\n        if (this.intersects.length > 0) {\n            if (this.intersects[0].object.start === 0) this.intersects[0].object.start = Date.now();\n            this.intersects[0].object.counter = Date.now() - this.intersects[0].object.start;\n            this.factor = this.intersects[0].object.counter / 1000;\n            if (this.cameraContainer.position.x !== this.intersects[0].object.getWorldPosition(new THREE.Vector3()).x && this.cameraContainer.position.z !== this.intersects[0].object.getWorldPosition(new THREE.Vector3()).z) this.pointer.scale.set(0.03 + this.factor * 0.015, 0.03 + this.factor * 0.015, 0.03 + this.factor * 0.015);\n            if (this.intersects[0].object.counter >= 1000) {\n                for (var e of this.spawnPoints)e.visible = true;\n                this.sound.stop();\n                this.intersects[0].object.visible = false;\n                this.cameraContainer.position.copy(this.intersects[0].object.getWorldPosition(new THREE.Vector3()).add(new THREE.Vector3(0, 1.3, 0)));\n                if (this.intersects[0].object.name === \"spawnPointStart\") {\n                    if (!this.sound.isPlaying) this.sound.play();\n                }\n            }\n        } else for (var e of this.spawnPoints){\n            e.start = 0;\n            e.counter = 0;\n            this.pointer.scale.set(0.03, 0.03, 0.03);\n        }\n    }\n    createInstanced(name, mesh) {\n        var count = 0;\n        var geometry, material;\n        var infos = [];\n        mesh.traverse((e)=>{\n            if (e.name.includes(name + \"0\") || e.name === name) {\n                count++;\n                e.traverse((o)=>{\n                    if (o.geometry) {\n                        geometry = e.geometry;\n                        material = e.material;\n                        o.visible = false;\n                        infos.push({\n                            pos: o.getWorldPosition(new THREE.Vector3),\n                            rot: o.getWorldQuaternion(new THREE.Quaternion()),\n                            scl: o.getWorldScale(new THREE.Vector3())\n                        });\n                    }\n                });\n            }\n        });\n        if (count === 0) console.log(\"No mesh with name \" + name);\n        else {\n            var InstancedMesh = new THREE.InstancedMesh(geometry, material, count);\n            var dummyModel = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1), new THREE.MeshBasicMaterial());\n            for(var i = 0; i < count; i++){\n                dummyModel.position.copy(infos[i].pos);\n                dummyModel.quaternion.copy(infos[i].rot);\n                dummyModel.scale.copy(infos[i].scl);\n                dummyModel.updateMatrix();\n                InstancedMesh.setMatrixAt(i, dummyModel.matrix);\n            }\n            InstancedMesh.needsUpdate = true;\n            return InstancedMesh;\n        }\n    }\n}\nwindow.Game = Game;\n\n//# sourceMappingURL=index.8a7a4bdf.js.map\n","class Game {\r\n    constructor() {\r\n        this.controller = null\r\n        this.wait = this.wait.bind(this)\r\n        this.wait()\r\n    }\r\n\r\n    wait() {\r\n        if (typeof THREE === \"undefined\" && typeof io === \"undefined\") { requestAnimationFrame(this.wait) } else { this.loadingDone() }\r\n    }\r\n\r\n    loadingDone() {\r\n        this.frameCap = 1000 / 60\r\n\r\n        this.scene = new THREE.Scene()\r\n\r\n        this.cameraContainer = new THREE.Object3D()\r\n\r\n        this.camera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, 0.001, 1000000);\r\n\r\n        this.cameraContainer.add(this.camera)\r\n        this.scene.add(this.cameraContainer)\r\n\r\n        this.renderer = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: false,\r\n            powerPreference: \"high-performance\",\r\n            stencil: false,\r\n            logarithmicDepthBuffer: true\r\n        });\r\n\r\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n        this.renderer.outputColorSpace = THREE.SRGBColorSpace\r\n        this.renderer.toneMapping = THREE.NeutralToneMapping\r\n        this.renderer.toneMappingExposure = 1.0\r\n\r\n        this.controls = new PointerLockControls(this.camera, this.renderer.domElement);\r\n\r\n        window.addEventListener('resize', () => {\r\n            this.camera.aspect = window.innerWidth / window.innerHeight;\r\n            this.camera.updateProjectionMatrix();\r\n            this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n        });\r\n\r\n        document.body.appendChild(this.renderer.domElement);\r\n\r\n        document.body.appendChild(VRButton.createButton(this.renderer));\r\n        this.renderer.xr.enabled = true;\r\n\r\n        this.clock = new THREE.Clock()\r\n\r\n        this.stats = new Stats()\r\n        document.body.appendChild(this.stats.dom)\r\n\r\n        this.cameraStart = new THREE.Vector3(4.5, 1.49, 9.5)\r\n\r\n        this.raycaster = new THREE.Raycaster()\r\n\r\n        this.introVillage = true\r\n        this.normalVillage = false\r\n\r\n        this.prevContextState = \"suspended\"\r\n\r\n        this.loadScene1()\r\n    }\r\n\r\n\r\n    loadScene1() {\r\n        this.loader = new GLTFLoader()\r\n        new RGBELoader().load(\"background5.hdr\", (texture) => {\r\n            texture.colorSpace = THREE.LinearSRGBColorSpace\r\n            texture.mapping = THREE.EquirectangularReflectionMapping;\r\n            this.scene.background = texture\r\n            this.scene.backgroundIntensity = 0.7\r\n            this.scene.environment = texture\r\n            this.scene.environmentIntensity = 1\r\n            this.loader.load(\"testfiaba6.glb\", (glb) => {\r\n                this.map = glb.scene\r\n                this.walls = this.createInstanced(\"fence_wood_straight\", this.map)\r\n                this.scene.add(this.walls)\r\n                this.spawnPoints = []\r\n                this.map.children.forEach((e) => {\r\n                    if (e.name.includes(\"spawnPoint\")) {\r\n                        e.material.transparent = true\r\n                        e.counter = 0\r\n                        e.start = 0\r\n                        e.visible = false\r\n                        this.spawnPoints.push(e)\r\n                    }\r\n                })\r\n\r\n                this.scene.add(this.map)\r\n                this.loader.load(\"pointer.glb\", (glb) => {\r\n                    this.pointer = glb.scene\r\n                    this.pointer.rotation.y = Math.PI / 2\r\n                    this.pointer.children[0].material = new THREE.MeshBasicMaterial({ color: 0xffffff, depthTest: false, depthWrite: false, transparent: true })\r\n                    this.pointer.position.z = -1\r\n                    this.camera.add(this.pointer)\r\n\r\n                    this.loader.load(\"cameraPath.glb\", (glb) => {\r\n                        this.cameraPath = glb.scene\r\n                        this.cameraPath.visible = false\r\n                        this.mixerCam = new THREE.AnimationMixer(this.cameraPath)\r\n                        this.actionCam = this.mixerCam.clipAction(glb.animations[0])\r\n                        this.actionCam.loop = THREE.LoopRepeat\r\n                        this.actionCam.timeScale = 0.15\r\n                        this.scene.add(this.cameraPath)\r\n                        this.loader.load(\"testfiaba-ped.glb\", (glb) => {\r\n                            this.actionIdle = glb.animations[1]\r\n                            this.ped = glb.scene\r\n                            this.mixer = new THREE.AnimationMixer(this.ped)\r\n                            this.action = this.mixer.clipAction(this.actionIdle)\r\n                            this.action.play()\r\n                            this.listener = new THREE.AudioListener()\r\n                            this.listener.rotation.y = Math.PI - Math.PI / 8\r\n                            this.camera.add(this.listener)\r\n                            this.sound = new THREE.PositionalAudio(this.listener)\r\n\r\n                            new THREE.AudioLoader().load(\"audio2.mp3\", (buffer) => {\r\n                                this.sound.setBuffer(buffer)\r\n                                this.sound.setVolume(10)\r\n                                this.sound.setLoop(true)\r\n                            })\r\n\r\n                            this.bgSound = new THREE.Audio(this.listener)\r\n                            new THREE.AudioLoader().load(\"bgaudio.mp3\", (buffer) => {\r\n                                this.bgSound.setBuffer(buffer)\r\n                                this.bgSound.setVolume(0.5)\r\n                                this.bgSound.setLoop(true)\r\n                            })\r\n\r\n                            this.voiceLine = new THREE.Audio(this.listener)\r\n                            new THREE.AudioLoader().load(\"voiceline.mp3\", (buffer) => {\r\n                                this.voiceLine.setBuffer(buffer)\r\n                                this.voiceLine.setVolume(3.5)\r\n                                this.voiceLine.setLoop(false)\r\n                                this.voiceLine.onEnded = () => {\r\n                                    console.log(\"ended\")\r\n                                    this.normalVillage = true\r\n                                    this.cameraContainer.position.copy(this.cameraStart)\r\n                                    for (var obj of this.spawnPoints) {\r\n                                        obj.visible = true\r\n                                    }\r\n                                    var startSpawn = this.map.getObjectByName(\"spawnPointStart\")\r\n                                    startSpawn.visible = false\r\n                                    this.sound.play()\r\n                                }\r\n                            })\r\n\r\n\r\n                            this.ped.add(this.sound)\r\n                            this.scene.add(this.ped)\r\n                            this.update()\r\n                        })\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    start() {\r\n        this.actionCam.play()\r\n        this.voiceLine.play()\r\n        this.bgSound.play()\r\n    }\r\n\r\n    update() {\r\n        this.renderer.setAnimationLoop(() => {\r\n            this.delta = this.clock.getDelta()\r\n            this.renderer.render(this.scene, this.camera);\r\n            this.stats.update()\r\n            this.mixer.update(this.delta)\r\n            this.mixerCam.update(this.delta)\r\n            if (this.introVillage) {\r\n                this.introVillage = false\r\n\r\n            }\r\n            if (!this.normalVillage) {\r\n                this.cameraContainer.position.copy(this.cameraPath.children[0].getWorldPosition(new THREE.Vector3()))\r\n            }\r\n\r\n            this.checkRaycast()\r\n            if (!this.renderer.xr.getCamera().cameras.length == 0) {\r\n                this.cameraContainer.position.y = -0.2; this.listener.context.resume()\r\n            }\r\n        })\r\n    }\r\n\r\n    checkRaycast() {\r\n        this.raycaster.set(this.camera.getWorldPosition(new THREE.Vector3()), this.camera.getWorldDirection(new THREE.Vector3()));\r\n        this.intersects = this.raycaster.intersectObjects(this.spawnPoints)\r\n        if (this.intersects.length > 0) {\r\n            if (this.intersects[0].object.start === 0) this.intersects[0].object.start = Date.now()\r\n            this.intersects[0].object.counter = Date.now() - this.intersects[0].object.start;\r\n            this.factor = this.intersects[0].object.counter / 1000\r\n            if (this.cameraContainer.position.x !== this.intersects[0].object.getWorldPosition(new THREE.Vector3()).x && this.cameraContainer.position.z !== this.intersects[0].object.getWorldPosition(new THREE.Vector3()).z) this.pointer.scale.set(0.03 + this.factor * 0.015, 0.03 + this.factor * 0.015, 0.03 + this.factor * 0.015)\r\n            if (this.intersects[0].object.counter >= 1000) {\r\n                for (var e of this.spawnPoints) {\r\n                    e.visible = true\r\n                }\r\n                this.sound.stop()\r\n                this.intersects[0].object.visible = false\r\n                this.cameraContainer.position.copy(this.intersects[0].object.getWorldPosition(new THREE.Vector3()).add(new THREE.Vector3(0, 1.3, 0)))\r\n                if (this.intersects[0].object.name === \"spawnPointStart\") {\r\n                    if (!this.sound.isPlaying) this.sound.play()\r\n                }\r\n            }\r\n        } else {\r\n            for (var e of this.spawnPoints) {\r\n                e.start = 0\r\n                e.counter = 0\r\n                this.pointer.scale.set(0.03, 0.03, 0.03)\r\n            }\r\n        }\r\n    }\r\n\r\n    createInstanced(name, mesh) {\r\n        var count = 0;\r\n        var geometry, material;\r\n        var infos = []\r\n        mesh.traverse((e) => {\r\n            if (e.name.includes(name + \"0\") || e.name === name) {\r\n                count++\r\n                e.traverse((o) => {\r\n                    if (o.geometry) {\r\n                        geometry = e.geometry\r\n                        material = e.material\r\n                        o.visible = false\r\n                        infos.push({ pos: o.getWorldPosition(new THREE.Vector3), rot: o.getWorldQuaternion(new THREE.Quaternion()), scl: o.getWorldScale(new THREE.Vector3()) })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n\r\n        if (count === 0) {\r\n            console.log(\"No mesh with name \" + name)\r\n        } else {\r\n            var InstancedMesh = new THREE.InstancedMesh(geometry, material, count)\r\n            var dummyModel = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1), new THREE.MeshBasicMaterial())\r\n            for (var i = 0; i < count; i++) {\r\n                dummyModel.position.copy(infos[i].pos)\r\n                dummyModel.quaternion.copy(infos[i].rot)\r\n                dummyModel.scale.copy(infos[i].scl)\r\n                dummyModel.updateMatrix()\r\n                InstancedMesh.setMatrixAt(i, dummyModel.matrix)\r\n            }\r\n            InstancedMesh.needsUpdate = true\r\n            return InstancedMesh\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nwindow.Game = Game\r\n"],"names":["window","Game","constructor","controller","wait","bind","THREE","io","requestAnimationFrame","loadingDone","frameCap","scene","Scene","cameraContainer","Object3D","camera","PerspectiveCamera","innerWidth","innerHeight","add","renderer","WebGLRenderer","antialias","alpha","powerPreference","stencil","logarithmicDepthBuffer","setSize","outputColorSpace","SRGBColorSpace","toneMapping","NeutralToneMapping","toneMappingExposure","controls","PointerLockControls","domElement","addEventListener","aspect","updateProjectionMatrix","document","body","appendChild","VRButton","createButton","xr","enabled","clock","Clock","stats","Stats","dom","cameraStart","Vector3","raycaster","Raycaster","introVillage","normalVillage","prevContextState","loadScene1","loader","GLTFLoader","RGBELoader","load","texture","colorSpace","LinearSRGBColorSpace","mapping","EquirectangularReflectionMapping","background","backgroundIntensity","environment","environmentIntensity","glb","map","walls","createInstanced","spawnPoints","children","forEach","e","name","includes","material","transparent","counter","start","visible","push","pointer","rotation","y","Math","PI","MeshBasicMaterial","color","depthTest","depthWrite","position","z","cameraPath","mixerCam","AnimationMixer","actionCam","clipAction","animations","loop","LoopRepeat","timeScale","actionIdle","ped","mixer","action","play","listener","AudioListener","sound","PositionalAudio","AudioLoader","buffer","setBuffer","setVolume","setLoop","bgSound","Audio","voiceLine","onEnded","obj","console","log","copy","startSpawn","getObjectByName","update","setAnimationLoop","delta","getDelta","render","getWorldPosition","checkRaycast","getCamera","cameras","length","context","resume","set","getWorldDirection","intersects","intersectObjects","object","Date","now","factor","x","scale","stop","isPlaying","mesh","geometry","count","infos","traverse","o","pos","rot","getWorldQuaternion","Quaternion","scl","getWorldScale","InstancedMesh","dummyModel","Mesh","BoxGeometry","i","quaternion","updateMatrix","setMatrixAt","matrix","needsUpdate"],"version":3,"file":"index.8a7a4bdf.js.map"}